-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity qubit_processor is
generic (
    C_S_AXI_CONTROL_ADDR_WIDTH : INTEGER := 7;
    C_S_AXI_CONTROL_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    s_axi_control_AWVALID : IN STD_LOGIC;
    s_axi_control_AWREADY : OUT STD_LOGIC;
    s_axi_control_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_WVALID : IN STD_LOGIC;
    s_axi_control_WREADY : OUT STD_LOGIC;
    s_axi_control_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH/8-1 downto 0);
    s_axi_control_ARVALID : IN STD_LOGIC;
    s_axi_control_ARREADY : OUT STD_LOGIC;
    s_axi_control_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_RVALID : OUT STD_LOGIC;
    s_axi_control_RREADY : IN STD_LOGIC;
    s_axi_control_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_control_BVALID : OUT STD_LOGIC;
    s_axi_control_BREADY : IN STD_LOGIC;
    s_axi_control_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of qubit_processor is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "qubit_processor_qubit_processor,hls_ip_2022_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.256000,HLS_SYN_LAT=10,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=2138,HLS_SYN_LUT=3807,HLS_VERSION=2022_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (10 downto 0) := "00000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (10 downto 0) := "00000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (10 downto 0) := "00000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (10 downto 0) := "00000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (10 downto 0) := "00000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (10 downto 0) := "00001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (10 downto 0) := "00010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (10 downto 0) := "00100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (10 downto 0) := "01000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (10 downto 0) := "10000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_3F3504F3 : STD_LOGIC_VECTOR (31 downto 0) := "00111111001101010000010011110011";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_3F800000 : STD_LOGIC_VECTOR (31 downto 0) := "00111111100000000000000000000000";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal operation : STD_LOGIC_VECTOR (1 downto 0);
    signal in_alpha_real : STD_LOGIC_VECTOR (31 downto 0);
    signal in_alpha_imag : STD_LOGIC_VECTOR (31 downto 0);
    signal in_beta_real : STD_LOGIC_VECTOR (31 downto 0);
    signal in_beta_imag : STD_LOGIC_VECTOR (31 downto 0);
    signal out_alpha_real_ap_vld : STD_LOGIC;
    signal out_alpha_imag_ap_vld : STD_LOGIC;
    signal out_beta_real_ap_vld : STD_LOGIC;
    signal out_beta_imag_ap_vld : STD_LOGIC;
    signal in_beta_imag_read_reg_272 : STD_LOGIC_VECTOR (31 downto 0);
    signal in_beta_real_read_reg_279 : STD_LOGIC_VECTOR (31 downto 0);
    signal in_alpha_imag_read_reg_286 : STD_LOGIC_VECTOR (31 downto 0);
    signal in_alpha_real_read_reg_293 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln32_fu_166_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln32_reg_300 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln32_2_fu_178_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln32_2_reg_308 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln32_fu_184_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln32_reg_314 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_130_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_reg_322 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal grp_fu_134_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add5_reg_327 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_138_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_reg_332 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_142_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub8_reg_337 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln70_1_fu_225_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln70_1_reg_342 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal select_ln71_fu_236_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln71_reg_347 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln72_1_fu_254_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln72_1_reg_352 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln73_fu_265_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln73_reg_357 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal icmp_ln32_1_fu_172_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_146_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_151_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_156_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_161_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln32_fu_190_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln70_fu_218_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln70_fu_214_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln32_1_fu_196_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln71_fu_232_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln32_2_fu_202_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln72_fu_247_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln72_fu_243_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln32_3_fu_208_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln73_fu_261_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ST_fsm_state10_blk : STD_LOGIC;
    signal ap_ST_fsm_state11_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component qubit_processor_fadd_32ns_32ns_32_5_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component qubit_processor_fsub_32ns_32ns_32_5_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component qubit_processor_fmul_32ns_32ns_32_4_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component qubit_processor_control_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        operation : OUT STD_LOGIC_VECTOR (1 downto 0);
        in_alpha_real : OUT STD_LOGIC_VECTOR (31 downto 0);
        in_alpha_imag : OUT STD_LOGIC_VECTOR (31 downto 0);
        in_beta_real : OUT STD_LOGIC_VECTOR (31 downto 0);
        in_beta_imag : OUT STD_LOGIC_VECTOR (31 downto 0);
        out_alpha_real : IN STD_LOGIC_VECTOR (31 downto 0);
        out_alpha_real_ap_vld : IN STD_LOGIC;
        out_alpha_imag : IN STD_LOGIC_VECTOR (31 downto 0);
        out_alpha_imag_ap_vld : IN STD_LOGIC;
        out_beta_real : IN STD_LOGIC_VECTOR (31 downto 0);
        out_beta_real_ap_vld : IN STD_LOGIC;
        out_beta_imag : IN STD_LOGIC_VECTOR (31 downto 0);
        out_beta_imag_ap_vld : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC );
    end component;



begin
    control_s_axi_U : component qubit_processor_control_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONTROL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONTROL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_control_AWVALID,
        AWREADY => s_axi_control_AWREADY,
        AWADDR => s_axi_control_AWADDR,
        WVALID => s_axi_control_WVALID,
        WREADY => s_axi_control_WREADY,
        WDATA => s_axi_control_WDATA,
        WSTRB => s_axi_control_WSTRB,
        ARVALID => s_axi_control_ARVALID,
        ARREADY => s_axi_control_ARREADY,
        ARADDR => s_axi_control_ARADDR,
        RVALID => s_axi_control_RVALID,
        RREADY => s_axi_control_RREADY,
        RDATA => s_axi_control_RDATA,
        RRESP => s_axi_control_RRESP,
        BVALID => s_axi_control_BVALID,
        BREADY => s_axi_control_BREADY,
        BRESP => s_axi_control_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        operation => operation,
        in_alpha_real => in_alpha_real,
        in_alpha_imag => in_alpha_imag,
        in_beta_real => in_beta_real,
        in_beta_imag => in_beta_imag,
        out_alpha_real => select_ln70_1_reg_342,
        out_alpha_real_ap_vld => out_alpha_real_ap_vld,
        out_alpha_imag => select_ln71_reg_347,
        out_alpha_imag_ap_vld => out_alpha_imag_ap_vld,
        out_beta_real => select_ln72_1_reg_352,
        out_beta_real_ap_vld => out_beta_real_ap_vld,
        out_beta_imag => select_ln73_reg_357,
        out_beta_imag_ap_vld => out_beta_imag_ap_vld,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle);

    fadd_32ns_32ns_32_5_full_dsp_1_U1 : component qubit_processor_fadd_32ns_32ns_32_5_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => in_alpha_real_read_reg_293,
        din1 => in_beta_real_read_reg_279,
        ce => ap_const_logic_1,
        dout => grp_fu_130_p2);

    fadd_32ns_32ns_32_5_full_dsp_1_U2 : component qubit_processor_fadd_32ns_32ns_32_5_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => in_alpha_imag_read_reg_286,
        din1 => in_beta_imag_read_reg_272,
        ce => ap_const_logic_1,
        dout => grp_fu_134_p2);

    fsub_32ns_32ns_32_5_full_dsp_1_U3 : component qubit_processor_fsub_32ns_32ns_32_5_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => in_alpha_real_read_reg_293,
        din1 => in_beta_real_read_reg_279,
        ce => ap_const_logic_1,
        dout => grp_fu_138_p2);

    fsub_32ns_32ns_32_5_full_dsp_1_U4 : component qubit_processor_fsub_32ns_32ns_32_5_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => in_alpha_imag_read_reg_286,
        din1 => in_beta_imag_read_reg_272,
        ce => ap_const_logic_1,
        dout => grp_fu_142_p2);

    fmul_32ns_32ns_32_4_max_dsp_1_U5 : component qubit_processor_fmul_32ns_32ns_32_4_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => add_reg_322,
        din1 => ap_const_lv32_3F3504F3,
        ce => ap_const_logic_1,
        dout => grp_fu_146_p2);

    fmul_32ns_32ns_32_4_max_dsp_1_U6 : component qubit_processor_fmul_32ns_32ns_32_4_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => add5_reg_327,
        din1 => ap_const_lv32_3F3504F3,
        ce => ap_const_logic_1,
        dout => grp_fu_151_p2);

    fmul_32ns_32ns_32_4_max_dsp_1_U7 : component qubit_processor_fmul_32ns_32ns_32_4_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => sub_reg_332,
        din1 => ap_const_lv32_3F3504F3,
        ce => ap_const_logic_1,
        dout => grp_fu_156_p2);

    fmul_32ns_32ns_32_4_max_dsp_1_U8 : component qubit_processor_fmul_32ns_32ns_32_4_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => sub8_reg_337,
        din1 => ap_const_lv32_3F3504F3,
        ce => ap_const_logic_1,
        dout => grp_fu_161_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((or_ln32_reg_314 = ap_const_lv1_0) and (icmp_ln32_reg_300 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                add5_reg_327 <= grp_fu_134_p2;
                add_reg_322 <= grp_fu_130_p2;
                sub8_reg_337 <= grp_fu_142_p2;
                sub_reg_332 <= grp_fu_138_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                icmp_ln32_2_reg_308 <= icmp_ln32_2_fu_178_p2;
                icmp_ln32_reg_300 <= icmp_ln32_fu_166_p2;
                in_alpha_imag_read_reg_286 <= in_alpha_imag;
                in_alpha_real_read_reg_293 <= in_alpha_real;
                in_beta_imag_read_reg_272 <= in_beta_imag;
                in_beta_real_read_reg_279 <= in_beta_real;
                or_ln32_reg_314 <= or_ln32_fu_184_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                select_ln70_1_reg_342 <= select_ln70_1_fu_225_p3;
                select_ln71_reg_347 <= select_ln71_fu_236_p3;
                select_ln72_1_reg_352 <= select_ln72_1_fu_254_p3;
                select_ln73_reg_357 <= select_ln73_fu_265_p3;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_ST_fsm_state10_blk <= ap_const_logic_0;
    ap_ST_fsm_state11_blk <= ap_const_logic_0;

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;
    ap_ST_fsm_state6_blk <= ap_const_logic_0;
    ap_ST_fsm_state7_blk <= ap_const_logic_0;
    ap_ST_fsm_state8_blk <= ap_const_logic_0;
    ap_ST_fsm_state9_blk <= ap_const_logic_0;

    ap_done_assign_proc : process(ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    bitcast_ln70_fu_214_p1 <= select_ln32_fu_190_p3;
    bitcast_ln71_fu_232_p1 <= select_ln32_1_fu_196_p3;
    bitcast_ln72_fu_243_p1 <= select_ln32_2_fu_202_p3;
    bitcast_ln73_fu_261_p1 <= select_ln32_3_fu_208_p3;
    icmp_ln32_1_fu_172_p2 <= "1" when (operation = ap_const_lv2_1) else "0";
    icmp_ln32_2_fu_178_p2 <= "1" when (operation = ap_const_lv2_0) else "0";
    icmp_ln32_fu_166_p2 <= "1" when (operation = ap_const_lv2_2) else "0";
    or_ln32_fu_184_p2 <= (icmp_ln32_2_fu_178_p2 or icmp_ln32_1_fu_172_p2);

    out_alpha_imag_ap_vld_assign_proc : process(ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            out_alpha_imag_ap_vld <= ap_const_logic_1;
        else 
            out_alpha_imag_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    out_alpha_real_ap_vld_assign_proc : process(ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            out_alpha_real_ap_vld <= ap_const_logic_1;
        else 
            out_alpha_real_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    out_beta_imag_ap_vld_assign_proc : process(ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            out_beta_imag_ap_vld <= ap_const_logic_1;
        else 
            out_beta_imag_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    out_beta_real_ap_vld_assign_proc : process(ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            out_beta_real_ap_vld <= ap_const_logic_1;
        else 
            out_beta_real_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    select_ln32_1_fu_196_p3 <= 
        grp_fu_151_p2 when (icmp_ln32_reg_300(0) = '1') else 
        in_beta_imag_read_reg_272;
    select_ln32_2_fu_202_p3 <= 
        grp_fu_156_p2 when (icmp_ln32_reg_300(0) = '1') else 
        in_alpha_real_read_reg_293;
    select_ln32_3_fu_208_p3 <= 
        grp_fu_161_p2 when (icmp_ln32_reg_300(0) = '1') else 
        in_alpha_imag_read_reg_286;
    select_ln32_fu_190_p3 <= 
        grp_fu_146_p2 when (icmp_ln32_reg_300(0) = '1') else 
        in_beta_real_read_reg_279;
    select_ln70_1_fu_225_p3 <= 
        select_ln70_fu_218_p3 when (or_ln32_reg_314(0) = '1') else 
        bitcast_ln70_fu_214_p1;
    select_ln70_fu_218_p3 <= 
        ap_const_lv32_3F800000 when (icmp_ln32_2_reg_308(0) = '1') else 
        ap_const_lv32_0;
    select_ln71_fu_236_p3 <= 
        ap_const_lv32_0 when (or_ln32_reg_314(0) = '1') else 
        bitcast_ln71_fu_232_p1;
    select_ln72_1_fu_254_p3 <= 
        select_ln72_fu_247_p3 when (or_ln32_reg_314(0) = '1') else 
        bitcast_ln72_fu_243_p1;
    select_ln72_fu_247_p3 <= 
        ap_const_lv32_0 when (icmp_ln32_2_reg_308(0) = '1') else 
        ap_const_lv32_3F800000;
    select_ln73_fu_265_p3 <= 
        ap_const_lv32_0 when (or_ln32_reg_314(0) = '1') else 
        bitcast_ln73_fu_261_p1;
end behav;
