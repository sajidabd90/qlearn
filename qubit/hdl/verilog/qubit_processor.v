// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="qubit_processor_qubit_processor,hls_ip_2022_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.256000,HLS_SYN_LAT=10,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=2138,HLS_SYN_LUT=3807,HLS_VERSION=2022_2}" *)

module qubit_processor (
        ap_clk,
        ap_rst_n,
        s_axi_control_AWVALID,
        s_axi_control_AWREADY,
        s_axi_control_AWADDR,
        s_axi_control_WVALID,
        s_axi_control_WREADY,
        s_axi_control_WDATA,
        s_axi_control_WSTRB,
        s_axi_control_ARVALID,
        s_axi_control_ARREADY,
        s_axi_control_ARADDR,
        s_axi_control_RVALID,
        s_axi_control_RREADY,
        s_axi_control_RDATA,
        s_axi_control_RRESP,
        s_axi_control_BVALID,
        s_axi_control_BREADY,
        s_axi_control_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 11'd1;
parameter    ap_ST_fsm_state2 = 11'd2;
parameter    ap_ST_fsm_state3 = 11'd4;
parameter    ap_ST_fsm_state4 = 11'd8;
parameter    ap_ST_fsm_state5 = 11'd16;
parameter    ap_ST_fsm_state6 = 11'd32;
parameter    ap_ST_fsm_state7 = 11'd64;
parameter    ap_ST_fsm_state8 = 11'd128;
parameter    ap_ST_fsm_state9 = 11'd256;
parameter    ap_ST_fsm_state10 = 11'd512;
parameter    ap_ST_fsm_state11 = 11'd1024;
parameter    C_S_AXI_CONTROL_DATA_WIDTH = 32;
parameter    C_S_AXI_CONTROL_ADDR_WIDTH = 7;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_CONTROL_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
input   s_axi_control_AWVALID;
output   s_axi_control_AWREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_AWADDR;
input   s_axi_control_WVALID;
output   s_axi_control_WREADY;
input  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_WDATA;
input  [C_S_AXI_CONTROL_WSTRB_WIDTH - 1:0] s_axi_control_WSTRB;
input   s_axi_control_ARVALID;
output   s_axi_control_ARREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_ARADDR;
output   s_axi_control_RVALID;
input   s_axi_control_RREADY;
output  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_RDATA;
output  [1:0] s_axi_control_RRESP;
output   s_axi_control_BVALID;
input   s_axi_control_BREADY;
output  [1:0] s_axi_control_BRESP;
output   interrupt;

 reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [10:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
wire   [1:0] operation;
wire   [31:0] in_alpha_real;
wire   [31:0] in_alpha_imag;
wire   [31:0] in_beta_real;
wire   [31:0] in_beta_imag;
reg    out_alpha_real_ap_vld;
reg    out_alpha_imag_ap_vld;
reg    out_beta_real_ap_vld;
reg    out_beta_imag_ap_vld;
reg   [31:0] in_beta_imag_read_reg_272;
reg   [31:0] in_beta_real_read_reg_279;
reg   [31:0] in_alpha_imag_read_reg_286;
reg   [31:0] in_alpha_real_read_reg_293;
wire   [0:0] icmp_ln32_fu_166_p2;
reg   [0:0] icmp_ln32_reg_300;
wire   [0:0] icmp_ln32_2_fu_178_p2;
reg   [0:0] icmp_ln32_2_reg_308;
wire   [0:0] or_ln32_fu_184_p2;
reg   [0:0] or_ln32_reg_314;
wire   [31:0] grp_fu_130_p2;
reg   [31:0] add_reg_322;
wire    ap_CS_fsm_state6;
wire   [31:0] grp_fu_134_p2;
reg   [31:0] add5_reg_327;
wire   [31:0] grp_fu_138_p2;
reg   [31:0] sub_reg_332;
wire   [31:0] grp_fu_142_p2;
reg   [31:0] sub8_reg_337;
wire   [31:0] select_ln70_1_fu_225_p3;
reg   [31:0] select_ln70_1_reg_342;
wire    ap_CS_fsm_state10;
wire   [31:0] select_ln71_fu_236_p3;
reg   [31:0] select_ln71_reg_347;
wire   [31:0] select_ln72_1_fu_254_p3;
reg   [31:0] select_ln72_1_reg_352;
wire   [31:0] select_ln73_fu_265_p3;
reg   [31:0] select_ln73_reg_357;
wire    ap_CS_fsm_state11;
wire    ap_CS_fsm_state2;
wire    ap_CS_fsm_state7;
wire   [0:0] icmp_ln32_1_fu_172_p2;
wire   [31:0] grp_fu_146_p2;
wire   [31:0] grp_fu_151_p2;
wire   [31:0] grp_fu_156_p2;
wire   [31:0] grp_fu_161_p2;
wire   [31:0] select_ln32_fu_190_p3;
wire   [31:0] select_ln70_fu_218_p3;
wire   [31:0] bitcast_ln70_fu_214_p1;
wire   [31:0] select_ln32_1_fu_196_p3;
wire   [31:0] bitcast_ln71_fu_232_p1;
wire   [31:0] select_ln32_2_fu_202_p3;
wire   [31:0] select_ln72_fu_247_p3;
wire   [31:0] bitcast_ln72_fu_243_p1;
wire   [31:0] select_ln32_3_fu_208_p3;
wire   [31:0] bitcast_ln73_fu_261_p1;
reg   [10:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
wire    ap_ST_fsm_state6_blk;
wire    ap_ST_fsm_state7_blk;
wire    ap_ST_fsm_state8_blk;
wire    ap_ST_fsm_state9_blk;
wire    ap_ST_fsm_state10_blk;
wire    ap_ST_fsm_state11_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 11'd1;
end

qubit_processor_control_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CONTROL_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CONTROL_DATA_WIDTH ))
control_s_axi_U(
    .AWVALID(s_axi_control_AWVALID),
    .AWREADY(s_axi_control_AWREADY),
    .AWADDR(s_axi_control_AWADDR),
    .WVALID(s_axi_control_WVALID),
    .WREADY(s_axi_control_WREADY),
    .WDATA(s_axi_control_WDATA),
    .WSTRB(s_axi_control_WSTRB),
    .ARVALID(s_axi_control_ARVALID),
    .ARREADY(s_axi_control_ARREADY),
    .ARADDR(s_axi_control_ARADDR),
    .RVALID(s_axi_control_RVALID),
    .RREADY(s_axi_control_RREADY),
    .RDATA(s_axi_control_RDATA),
    .RRESP(s_axi_control_RRESP),
    .BVALID(s_axi_control_BVALID),
    .BREADY(s_axi_control_BREADY),
    .BRESP(s_axi_control_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .operation(operation),
    .in_alpha_real(in_alpha_real),
    .in_alpha_imag(in_alpha_imag),
    .in_beta_real(in_beta_real),
    .in_beta_imag(in_beta_imag),
    .out_alpha_real(select_ln70_1_reg_342),
    .out_alpha_real_ap_vld(out_alpha_real_ap_vld),
    .out_alpha_imag(select_ln71_reg_347),
    .out_alpha_imag_ap_vld(out_alpha_imag_ap_vld),
    .out_beta_real(select_ln72_1_reg_352),
    .out_beta_real_ap_vld(out_beta_real_ap_vld),
    .out_beta_imag(select_ln73_reg_357),
    .out_beta_imag_ap_vld(out_beta_imag_ap_vld),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle)
);

qubit_processor_fadd_32ns_32ns_32_5_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fadd_32ns_32ns_32_5_full_dsp_1_U1(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(in_alpha_real_read_reg_293),
    .din1(in_beta_real_read_reg_279),
    .ce(1'b1),
    .dout(grp_fu_130_p2)
);

qubit_processor_fadd_32ns_32ns_32_5_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fadd_32ns_32ns_32_5_full_dsp_1_U2(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(in_alpha_imag_read_reg_286),
    .din1(in_beta_imag_read_reg_272),
    .ce(1'b1),
    .dout(grp_fu_134_p2)
);

qubit_processor_fsub_32ns_32ns_32_5_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fsub_32ns_32ns_32_5_full_dsp_1_U3(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(in_alpha_real_read_reg_293),
    .din1(in_beta_real_read_reg_279),
    .ce(1'b1),
    .dout(grp_fu_138_p2)
);

qubit_processor_fsub_32ns_32ns_32_5_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fsub_32ns_32ns_32_5_full_dsp_1_U4(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(in_alpha_imag_read_reg_286),
    .din1(in_beta_imag_read_reg_272),
    .ce(1'b1),
    .dout(grp_fu_142_p2)
);

qubit_processor_fmul_32ns_32ns_32_4_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fmul_32ns_32ns_32_4_max_dsp_1_U5(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(add_reg_322),
    .din1(32'd1060439283),
    .ce(1'b1),
    .dout(grp_fu_146_p2)
);

qubit_processor_fmul_32ns_32ns_32_4_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fmul_32ns_32ns_32_4_max_dsp_1_U6(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(add5_reg_327),
    .din1(32'd1060439283),
    .ce(1'b1),
    .dout(grp_fu_151_p2)
);

qubit_processor_fmul_32ns_32ns_32_4_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fmul_32ns_32ns_32_4_max_dsp_1_U7(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(sub_reg_332),
    .din1(32'd1060439283),
    .ce(1'b1),
    .dout(grp_fu_156_p2)
);

qubit_processor_fmul_32ns_32ns_32_4_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fmul_32ns_32ns_32_4_max_dsp_1_U8(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(sub8_reg_337),
    .din1(32'd1060439283),
    .ce(1'b1),
    .dout(grp_fu_161_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((or_ln32_reg_314 == 1'd0) & (icmp_ln32_reg_300 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
        add5_reg_327 <= grp_fu_134_p2;
        add_reg_322 <= grp_fu_130_p2;
        sub8_reg_337 <= grp_fu_142_p2;
        sub_reg_332 <= grp_fu_138_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        icmp_ln32_2_reg_308 <= icmp_ln32_2_fu_178_p2;
        icmp_ln32_reg_300 <= icmp_ln32_fu_166_p2;
        in_alpha_imag_read_reg_286 <= in_alpha_imag;
        in_alpha_real_read_reg_293 <= in_alpha_real;
        in_beta_imag_read_reg_272 <= in_beta_imag;
        in_beta_real_read_reg_279 <= in_beta_real;
        or_ln32_reg_314 <= or_ln32_fu_184_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        select_ln70_1_reg_342 <= select_ln70_1_fu_225_p3;
        select_ln71_reg_347 <= select_ln71_fu_236_p3;
        select_ln72_1_reg_352 <= select_ln72_1_fu_254_p3;
        select_ln73_reg_357 <= select_ln73_fu_265_p3;
    end
end

assign ap_ST_fsm_state10_blk = 1'b0;

assign ap_ST_fsm_state11_blk = 1'b0;

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

assign ap_ST_fsm_state5_blk = 1'b0;

assign ap_ST_fsm_state6_blk = 1'b0;

assign ap_ST_fsm_state7_blk = 1'b0;

assign ap_ST_fsm_state8_blk = 1'b0;

assign ap_ST_fsm_state9_blk = 1'b0;

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        out_alpha_imag_ap_vld = 1'b1;
    end else begin
        out_alpha_imag_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        out_alpha_real_ap_vld = 1'b1;
    end else begin
        out_alpha_real_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        out_beta_imag_ap_vld = 1'b1;
    end else begin
        out_beta_imag_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        out_beta_real_ap_vld = 1'b1;
    end else begin
        out_beta_real_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign bitcast_ln70_fu_214_p1 = select_ln32_fu_190_p3;

assign bitcast_ln71_fu_232_p1 = select_ln32_1_fu_196_p3;

assign bitcast_ln72_fu_243_p1 = select_ln32_2_fu_202_p3;

assign bitcast_ln73_fu_261_p1 = select_ln32_3_fu_208_p3;

assign icmp_ln32_1_fu_172_p2 = ((operation == 2'd1) ? 1'b1 : 1'b0);

assign icmp_ln32_2_fu_178_p2 = ((operation == 2'd0) ? 1'b1 : 1'b0);

assign icmp_ln32_fu_166_p2 = ((operation == 2'd2) ? 1'b1 : 1'b0);

assign or_ln32_fu_184_p2 = (icmp_ln32_2_fu_178_p2 | icmp_ln32_1_fu_172_p2);

assign select_ln32_1_fu_196_p3 = ((icmp_ln32_reg_300[0:0] == 1'b1) ? grp_fu_151_p2 : in_beta_imag_read_reg_272);

assign select_ln32_2_fu_202_p3 = ((icmp_ln32_reg_300[0:0] == 1'b1) ? grp_fu_156_p2 : in_alpha_real_read_reg_293);

assign select_ln32_3_fu_208_p3 = ((icmp_ln32_reg_300[0:0] == 1'b1) ? grp_fu_161_p2 : in_alpha_imag_read_reg_286);

assign select_ln32_fu_190_p3 = ((icmp_ln32_reg_300[0:0] == 1'b1) ? grp_fu_146_p2 : in_beta_real_read_reg_279);

assign select_ln70_1_fu_225_p3 = ((or_ln32_reg_314[0:0] == 1'b1) ? select_ln70_fu_218_p3 : bitcast_ln70_fu_214_p1);

assign select_ln70_fu_218_p3 = ((icmp_ln32_2_reg_308[0:0] == 1'b1) ? 32'd1065353216 : 32'd0);

assign select_ln71_fu_236_p3 = ((or_ln32_reg_314[0:0] == 1'b1) ? 32'd0 : bitcast_ln71_fu_232_p1);

assign select_ln72_1_fu_254_p3 = ((or_ln32_reg_314[0:0] == 1'b1) ? select_ln72_fu_247_p3 : bitcast_ln72_fu_243_p1);

assign select_ln72_fu_247_p3 = ((icmp_ln32_2_reg_308[0:0] == 1'b1) ? 32'd0 : 32'd1065353216);

assign select_ln73_fu_265_p3 = ((or_ln32_reg_314[0:0] == 1'b1) ? 32'd0 : bitcast_ln73_fu_261_p1);

endmodule //qubit_processor
