-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity qubit_processor_fixed is
generic (
    C_S_AXI_CONTROL_ADDR_WIDTH : INTEGER := 7;
    C_S_AXI_CONTROL_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    s_axi_control_AWVALID : IN STD_LOGIC;
    s_axi_control_AWREADY : OUT STD_LOGIC;
    s_axi_control_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_WVALID : IN STD_LOGIC;
    s_axi_control_WREADY : OUT STD_LOGIC;
    s_axi_control_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH/8-1 downto 0);
    s_axi_control_ARVALID : IN STD_LOGIC;
    s_axi_control_ARREADY : OUT STD_LOGIC;
    s_axi_control_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_RVALID : OUT STD_LOGIC;
    s_axi_control_RREADY : IN STD_LOGIC;
    s_axi_control_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_control_BVALID : OUT STD_LOGIC;
    s_axi_control_BREADY : IN STD_LOGIC;
    s_axi_control_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of qubit_processor_fixed is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "qubit_processor_fixed_qubit_processor_fixed,hls_ip_2022_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=3.000000,HLS_INPUT_ARCH=pipeline,HLS_SYN_CLOCK=2.077000,HLS_SYN_LAT=6,HLS_SYN_TPT=1,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=1220,HLS_SYN_LUT=808,HLS_VERSION=2022_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv29_16A0 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000001011010100000";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv16_2000 : STD_LOGIC_VECTOR (15 downto 0) := "0010000000000000";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_ready : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal operation : STD_LOGIC_VECTOR (1 downto 0);
    signal in_alpha_real : STD_LOGIC_VECTOR (15 downto 0);
    signal in_alpha_imag : STD_LOGIC_VECTOR (15 downto 0);
    signal in_beta_real : STD_LOGIC_VECTOR (15 downto 0);
    signal in_beta_imag : STD_LOGIC_VECTOR (15 downto 0);
    signal out_alpha_real : STD_LOGIC_VECTOR (15 downto 0);
    signal out_alpha_real_ap_vld : STD_LOGIC;
    signal out_alpha_imag : STD_LOGIC_VECTOR (15 downto 0);
    signal out_alpha_imag_ap_vld : STD_LOGIC;
    signal out_beta_real : STD_LOGIC_VECTOR (15 downto 0);
    signal out_beta_real_ap_vld : STD_LOGIC;
    signal out_beta_imag : STD_LOGIC_VECTOR (15 downto 0);
    signal out_beta_imag_ap_vld : STD_LOGIC;
    signal in_beta_imag_read_reg_424 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal in_beta_imag_read_reg_424_pp0_iter1_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal in_beta_imag_read_reg_424_pp0_iter2_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal in_beta_imag_read_reg_424_pp0_iter3_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal in_beta_imag_read_reg_424_pp0_iter4_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal in_beta_imag_read_reg_424_pp0_iter5_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal in_beta_real_read_reg_430 : STD_LOGIC_VECTOR (15 downto 0);
    signal in_beta_real_read_reg_430_pp0_iter1_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal in_beta_real_read_reg_430_pp0_iter2_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal in_beta_real_read_reg_430_pp0_iter3_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal in_beta_real_read_reg_430_pp0_iter4_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal in_beta_real_read_reg_430_pp0_iter5_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal in_alpha_imag_read_reg_436 : STD_LOGIC_VECTOR (15 downto 0);
    signal in_alpha_imag_read_reg_436_pp0_iter1_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal in_alpha_imag_read_reg_436_pp0_iter2_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal in_alpha_imag_read_reg_436_pp0_iter3_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal in_alpha_imag_read_reg_436_pp0_iter4_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal in_alpha_imag_read_reg_436_pp0_iter5_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal in_alpha_real_read_reg_442 : STD_LOGIC_VECTOR (15 downto 0);
    signal in_alpha_real_read_reg_442_pp0_iter1_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal in_alpha_real_read_reg_442_pp0_iter2_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal in_alpha_real_read_reg_442_pp0_iter3_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal in_alpha_real_read_reg_442_pp0_iter4_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal in_alpha_real_read_reg_442_pp0_iter5_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal operation_read_reg_448 : STD_LOGIC_VECTOR (1 downto 0);
    signal ret_V_fu_251_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal ret_V_reg_455 : STD_LOGIC_VECTOR (16 downto 0);
    signal ret_V_1_fu_263_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal ret_V_1_reg_460 : STD_LOGIC_VECTOR (16 downto 0);
    signal ret_V_2_fu_269_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal ret_V_2_reg_465 : STD_LOGIC_VECTOR (16 downto 0);
    signal ret_V_3_fu_275_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal ret_V_3_reg_470 : STD_LOGIC_VECTOR (16 downto 0);
    signal icmp_ln49_fu_281_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln49_reg_475 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln49_reg_475_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln49_reg_475_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln49_reg_475_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln49_reg_475_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln49_2_fu_291_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln49_2_reg_483 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln49_2_reg_483_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln49_2_reg_483_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln49_2_reg_483_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln49_2_reg_483_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln49_fu_296_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln49_reg_489 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln49_reg_489_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln49_reg_489_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln49_reg_489_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln49_reg_489_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_149_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal mul_ln1270_reg_517 : STD_LOGIC_VECTOR (28 downto 0);
    signal grp_fu_151_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal mul_ln1270_1_reg_522 : STD_LOGIC_VECTOR (28 downto 0);
    signal grp_fu_148_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal mul_ln1270_2_reg_527 : STD_LOGIC_VECTOR (28 downto 0);
    signal grp_fu_150_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal mul_ln1270_3_reg_532 : STD_LOGIC_VECTOR (28 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal grp_fu_148_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal grp_fu_149_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_150_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_151_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal sext_ln1347_1_fu_248_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln1347_fu_245_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln1347_3_fu_260_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln1347_2_fu_257_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal icmp_ln49_1_fu_286_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln818_3_fu_345_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln49_fu_354_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln818_2_fu_336_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln49_2_fu_368_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln49_3_fu_375_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln818_1_fu_327_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln49_5_fu_389_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln_fu_318_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln49_7_fu_403_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln49_8_fu_410_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_idle_pp0_0to5 : STD_LOGIC;
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component qubit_processor_fixed_mul_17s_14ns_29_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (16 downto 0);
        din1 : IN STD_LOGIC_VECTOR (13 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (28 downto 0) );
    end component;


    component qubit_processor_fixed_control_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        operation : OUT STD_LOGIC_VECTOR (1 downto 0);
        in_alpha_real : OUT STD_LOGIC_VECTOR (15 downto 0);
        in_alpha_imag : OUT STD_LOGIC_VECTOR (15 downto 0);
        in_beta_real : OUT STD_LOGIC_VECTOR (15 downto 0);
        in_beta_imag : OUT STD_LOGIC_VECTOR (15 downto 0);
        out_alpha_real : IN STD_LOGIC_VECTOR (15 downto 0);
        out_alpha_real_ap_vld : IN STD_LOGIC;
        out_alpha_imag : IN STD_LOGIC_VECTOR (15 downto 0);
        out_alpha_imag_ap_vld : IN STD_LOGIC;
        out_beta_real : IN STD_LOGIC_VECTOR (15 downto 0);
        out_beta_real_ap_vld : IN STD_LOGIC;
        out_beta_imag : IN STD_LOGIC_VECTOR (15 downto 0);
        out_beta_imag_ap_vld : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC );
    end component;



begin
    control_s_axi_U : component qubit_processor_fixed_control_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONTROL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONTROL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_control_AWVALID,
        AWREADY => s_axi_control_AWREADY,
        AWADDR => s_axi_control_AWADDR,
        WVALID => s_axi_control_WVALID,
        WREADY => s_axi_control_WREADY,
        WDATA => s_axi_control_WDATA,
        WSTRB => s_axi_control_WSTRB,
        ARVALID => s_axi_control_ARVALID,
        ARREADY => s_axi_control_ARREADY,
        ARADDR => s_axi_control_ARADDR,
        RVALID => s_axi_control_RVALID,
        RREADY => s_axi_control_RREADY,
        RDATA => s_axi_control_RDATA,
        RRESP => s_axi_control_RRESP,
        BVALID => s_axi_control_BVALID,
        BREADY => s_axi_control_BREADY,
        BRESP => s_axi_control_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        operation => operation,
        in_alpha_real => in_alpha_real,
        in_alpha_imag => in_alpha_imag,
        in_beta_real => in_beta_real,
        in_beta_imag => in_beta_imag,
        out_alpha_real => out_alpha_real,
        out_alpha_real_ap_vld => out_alpha_real_ap_vld,
        out_alpha_imag => out_alpha_imag,
        out_alpha_imag_ap_vld => out_alpha_imag_ap_vld,
        out_beta_real => out_beta_real,
        out_beta_real_ap_vld => out_beta_real_ap_vld,
        out_beta_imag => out_beta_imag,
        out_beta_imag_ap_vld => out_beta_imag_ap_vld,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle);

    mul_17s_14ns_29_4_1_U1 : component qubit_processor_fixed_mul_17s_14ns_29_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 17,
        din1_WIDTH => 14,
        dout_WIDTH => 29)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => ret_V_2_reg_465,
        din1 => grp_fu_148_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_148_p2);

    mul_17s_14ns_29_4_1_U2 : component qubit_processor_fixed_mul_17s_14ns_29_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 17,
        din1_WIDTH => 14,
        dout_WIDTH => 29)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => ret_V_reg_455,
        din1 => grp_fu_149_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_149_p2);

    mul_17s_14ns_29_4_1_U3 : component qubit_processor_fixed_mul_17s_14ns_29_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 17,
        din1_WIDTH => 14,
        dout_WIDTH => 29)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => ret_V_3_reg_470,
        din1 => grp_fu_150_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_150_p2);

    mul_17s_14ns_29_4_1_U4 : component qubit_processor_fixed_mul_17s_14ns_29_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 17,
        din1_WIDTH => 14,
        dout_WIDTH => 29)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => ret_V_1_reg_460,
        din1 => grp_fu_151_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_151_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln49_2_reg_483 <= icmp_ln49_2_fu_291_p2;
                icmp_ln49_reg_475 <= icmp_ln49_fu_281_p2;
                in_alpha_imag_read_reg_436 <= in_alpha_imag;
                in_alpha_imag_read_reg_436_pp0_iter1_reg <= in_alpha_imag_read_reg_436;
                in_alpha_real_read_reg_442 <= in_alpha_real;
                in_alpha_real_read_reg_442_pp0_iter1_reg <= in_alpha_real_read_reg_442;
                in_beta_imag_read_reg_424 <= in_beta_imag;
                in_beta_imag_read_reg_424_pp0_iter1_reg <= in_beta_imag_read_reg_424;
                in_beta_real_read_reg_430 <= in_beta_real;
                in_beta_real_read_reg_430_pp0_iter1_reg <= in_beta_real_read_reg_430;
                operation_read_reg_448 <= operation;
                or_ln49_reg_489 <= or_ln49_fu_296_p2;
                ret_V_1_reg_460 <= ret_V_1_fu_263_p2;
                ret_V_2_reg_465 <= ret_V_2_fu_269_p2;
                ret_V_3_reg_470 <= ret_V_3_fu_275_p2;
                ret_V_reg_455 <= ret_V_fu_251_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                icmp_ln49_2_reg_483_pp0_iter2_reg <= icmp_ln49_2_reg_483;
                icmp_ln49_2_reg_483_pp0_iter3_reg <= icmp_ln49_2_reg_483_pp0_iter2_reg;
                icmp_ln49_2_reg_483_pp0_iter4_reg <= icmp_ln49_2_reg_483_pp0_iter3_reg;
                icmp_ln49_2_reg_483_pp0_iter5_reg <= icmp_ln49_2_reg_483_pp0_iter4_reg;
                icmp_ln49_reg_475_pp0_iter2_reg <= icmp_ln49_reg_475;
                icmp_ln49_reg_475_pp0_iter3_reg <= icmp_ln49_reg_475_pp0_iter2_reg;
                icmp_ln49_reg_475_pp0_iter4_reg <= icmp_ln49_reg_475_pp0_iter3_reg;
                icmp_ln49_reg_475_pp0_iter5_reg <= icmp_ln49_reg_475_pp0_iter4_reg;
                in_alpha_imag_read_reg_436_pp0_iter2_reg <= in_alpha_imag_read_reg_436_pp0_iter1_reg;
                in_alpha_imag_read_reg_436_pp0_iter3_reg <= in_alpha_imag_read_reg_436_pp0_iter2_reg;
                in_alpha_imag_read_reg_436_pp0_iter4_reg <= in_alpha_imag_read_reg_436_pp0_iter3_reg;
                in_alpha_imag_read_reg_436_pp0_iter5_reg <= in_alpha_imag_read_reg_436_pp0_iter4_reg;
                in_alpha_real_read_reg_442_pp0_iter2_reg <= in_alpha_real_read_reg_442_pp0_iter1_reg;
                in_alpha_real_read_reg_442_pp0_iter3_reg <= in_alpha_real_read_reg_442_pp0_iter2_reg;
                in_alpha_real_read_reg_442_pp0_iter4_reg <= in_alpha_real_read_reg_442_pp0_iter3_reg;
                in_alpha_real_read_reg_442_pp0_iter5_reg <= in_alpha_real_read_reg_442_pp0_iter4_reg;
                in_beta_imag_read_reg_424_pp0_iter2_reg <= in_beta_imag_read_reg_424_pp0_iter1_reg;
                in_beta_imag_read_reg_424_pp0_iter3_reg <= in_beta_imag_read_reg_424_pp0_iter2_reg;
                in_beta_imag_read_reg_424_pp0_iter4_reg <= in_beta_imag_read_reg_424_pp0_iter3_reg;
                in_beta_imag_read_reg_424_pp0_iter5_reg <= in_beta_imag_read_reg_424_pp0_iter4_reg;
                in_beta_real_read_reg_430_pp0_iter2_reg <= in_beta_real_read_reg_430_pp0_iter1_reg;
                in_beta_real_read_reg_430_pp0_iter3_reg <= in_beta_real_read_reg_430_pp0_iter2_reg;
                in_beta_real_read_reg_430_pp0_iter4_reg <= in_beta_real_read_reg_430_pp0_iter3_reg;
                in_beta_real_read_reg_430_pp0_iter5_reg <= in_beta_real_read_reg_430_pp0_iter4_reg;
                or_ln49_reg_489_pp0_iter2_reg <= or_ln49_reg_489;
                or_ln49_reg_489_pp0_iter3_reg <= or_ln49_reg_489_pp0_iter2_reg;
                or_ln49_reg_489_pp0_iter4_reg <= or_ln49_reg_489_pp0_iter3_reg;
                or_ln49_reg_489_pp0_iter5_reg <= or_ln49_reg_489_pp0_iter4_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (or_ln49_reg_489_pp0_iter4_reg = ap_const_lv1_0) and (icmp_ln49_reg_475_pp0_iter4_reg = ap_const_lv1_1))) then
                mul_ln1270_1_reg_522 <= grp_fu_151_p2;
                mul_ln1270_2_reg_527 <= grp_fu_148_p2;
                mul_ln1270_3_reg_532 <= grp_fu_150_p2;
                mul_ln1270_reg_517 <= grp_fu_149_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage0_subdone, ap_reset_idle_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_done_assign_proc : process(ap_enable_reg_pp0_iter6, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start;

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_idle_pp0)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6)
    begin
        if (((ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to5_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5)
    begin
        if (((ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0_0to5 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to5 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_reset_idle_pp0_assign_proc : process(ap_start, ap_idle_pp0_0to5)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0_0to5 = ap_const_logic_1))) then 
            ap_reset_idle_pp0 <= ap_const_logic_1;
        else 
            ap_reset_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    grp_fu_148_p1 <= ap_const_lv29_16A0(14 - 1 downto 0);
    grp_fu_149_p1 <= ap_const_lv29_16A0(14 - 1 downto 0);
    grp_fu_150_p1 <= ap_const_lv29_16A0(14 - 1 downto 0);
    grp_fu_151_p1 <= ap_const_lv29_16A0(14 - 1 downto 0);
    icmp_ln49_1_fu_286_p2 <= "1" when (operation_read_reg_448 = ap_const_lv2_0) else "0";
    icmp_ln49_2_fu_291_p2 <= "1" when (operation_read_reg_448 = ap_const_lv2_1) else "0";
    icmp_ln49_fu_281_p2 <= "1" when (operation_read_reg_448 = ap_const_lv2_2) else "0";
    or_ln49_fu_296_p2 <= (icmp_ln49_2_fu_291_p2 or icmp_ln49_1_fu_286_p2);
    out_alpha_imag <= 
        ap_const_lv16_0 when (or_ln49_reg_489_pp0_iter5_reg(0) = '1') else 
        select_ln49_5_fu_389_p3;

    out_alpha_imag_ap_vld_assign_proc : process(ap_enable_reg_pp0_iter6, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1))) then 
            out_alpha_imag_ap_vld <= ap_const_logic_1;
        else 
            out_alpha_imag_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    out_alpha_real <= 
        select_ln49_7_fu_403_p3 when (or_ln49_reg_489_pp0_iter5_reg(0) = '1') else 
        select_ln49_8_fu_410_p3;

    out_alpha_real_ap_vld_assign_proc : process(ap_enable_reg_pp0_iter6, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1))) then 
            out_alpha_real_ap_vld <= ap_const_logic_1;
        else 
            out_alpha_real_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    out_beta_imag <= 
        ap_const_lv16_0 when (or_ln49_reg_489_pp0_iter5_reg(0) = '1') else 
        select_ln49_fu_354_p3;

    out_beta_imag_ap_vld_assign_proc : process(ap_enable_reg_pp0_iter6, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1))) then 
            out_beta_imag_ap_vld <= ap_const_logic_1;
        else 
            out_beta_imag_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    out_beta_real <= 
        select_ln49_2_fu_368_p3 when (or_ln49_reg_489_pp0_iter5_reg(0) = '1') else 
        select_ln49_3_fu_375_p3;

    out_beta_real_ap_vld_assign_proc : process(ap_enable_reg_pp0_iter6, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1))) then 
            out_beta_real_ap_vld <= ap_const_logic_1;
        else 
            out_beta_real_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    ret_V_1_fu_263_p2 <= std_logic_vector(signed(sext_ln1347_3_fu_260_p1) + signed(sext_ln1347_2_fu_257_p1));
    ret_V_2_fu_269_p2 <= std_logic_vector(signed(sext_ln1347_fu_245_p1) - signed(sext_ln1347_1_fu_248_p1));
    ret_V_3_fu_275_p2 <= std_logic_vector(signed(sext_ln1347_2_fu_257_p1) - signed(sext_ln1347_3_fu_260_p1));
    ret_V_fu_251_p2 <= std_logic_vector(signed(sext_ln1347_1_fu_248_p1) + signed(sext_ln1347_fu_245_p1));
    select_ln49_2_fu_368_p3 <= 
        ap_const_lv16_2000 when (icmp_ln49_2_reg_483_pp0_iter5_reg(0) = '1') else 
        ap_const_lv16_0;
    select_ln49_3_fu_375_p3 <= 
        trunc_ln818_2_fu_336_p4 when (icmp_ln49_reg_475_pp0_iter5_reg(0) = '1') else 
        in_alpha_real_read_reg_442_pp0_iter5_reg;
    select_ln49_5_fu_389_p3 <= 
        trunc_ln818_1_fu_327_p4 when (icmp_ln49_reg_475_pp0_iter5_reg(0) = '1') else 
        in_beta_imag_read_reg_424_pp0_iter5_reg;
    select_ln49_7_fu_403_p3 <= 
        ap_const_lv16_0 when (icmp_ln49_2_reg_483_pp0_iter5_reg(0) = '1') else 
        ap_const_lv16_2000;
    select_ln49_8_fu_410_p3 <= 
        trunc_ln_fu_318_p4 when (icmp_ln49_reg_475_pp0_iter5_reg(0) = '1') else 
        in_beta_real_read_reg_430_pp0_iter5_reg;
    select_ln49_fu_354_p3 <= 
        trunc_ln818_3_fu_345_p4 when (icmp_ln49_reg_475_pp0_iter5_reg(0) = '1') else 
        in_alpha_imag_read_reg_436_pp0_iter5_reg;
        sext_ln1347_1_fu_248_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(in_beta_real_read_reg_430),17));

        sext_ln1347_2_fu_257_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(in_alpha_imag_read_reg_436),17));

        sext_ln1347_3_fu_260_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(in_beta_imag_read_reg_424),17));

        sext_ln1347_fu_245_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(in_alpha_real_read_reg_442),17));

    trunc_ln818_1_fu_327_p4 <= mul_ln1270_1_reg_522(28 downto 13);
    trunc_ln818_2_fu_336_p4 <= mul_ln1270_2_reg_527(28 downto 13);
    trunc_ln818_3_fu_345_p4 <= mul_ln1270_3_reg_532(28 downto 13);
    trunc_ln_fu_318_p4 <= mul_ln1270_reg_517(28 downto 13);
end behav;
