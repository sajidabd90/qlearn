// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="qubit_processor_fixed_qubit_processor_fixed,hls_ip_2022_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=3.000000,HLS_INPUT_ARCH=pipeline,HLS_SYN_CLOCK=2.077000,HLS_SYN_LAT=6,HLS_SYN_TPT=1,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=1220,HLS_SYN_LUT=808,HLS_VERSION=2022_2}" *)

module qubit_processor_fixed (
        ap_clk,
        ap_rst_n,
        s_axi_control_AWVALID,
        s_axi_control_AWREADY,
        s_axi_control_AWADDR,
        s_axi_control_WVALID,
        s_axi_control_WREADY,
        s_axi_control_WDATA,
        s_axi_control_WSTRB,
        s_axi_control_ARVALID,
        s_axi_control_ARREADY,
        s_axi_control_ARADDR,
        s_axi_control_RVALID,
        s_axi_control_RREADY,
        s_axi_control_RDATA,
        s_axi_control_RRESP,
        s_axi_control_BVALID,
        s_axi_control_BREADY,
        s_axi_control_BRESP,
        interrupt
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;
parameter    C_S_AXI_CONTROL_DATA_WIDTH = 32;
parameter    C_S_AXI_CONTROL_ADDR_WIDTH = 7;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_CONTROL_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
input   s_axi_control_AWVALID;
output   s_axi_control_AWREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_AWADDR;
input   s_axi_control_WVALID;
output   s_axi_control_WREADY;
input  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_WDATA;
input  [C_S_AXI_CONTROL_WSTRB_WIDTH - 1:0] s_axi_control_WSTRB;
input   s_axi_control_ARVALID;
output   s_axi_control_ARREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_ARADDR;
output   s_axi_control_RVALID;
input   s_axi_control_RREADY;
output  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_RDATA;
output  [1:0] s_axi_control_RRESP;
output   s_axi_control_BVALID;
input   s_axi_control_BREADY;
output  [1:0] s_axi_control_BRESP;
output   interrupt;

 reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_idle_pp0;
reg    ap_ready;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
wire    ap_block_state5_pp0_stage0_iter4;
wire    ap_block_state6_pp0_stage0_iter5;
wire    ap_block_state7_pp0_stage0_iter6;
wire    ap_block_pp0_stage0_subdone;
wire   [1:0] operation;
wire   [15:0] in_alpha_real;
wire   [15:0] in_alpha_imag;
wire   [15:0] in_beta_real;
wire   [15:0] in_beta_imag;
wire   [15:0] out_alpha_real;
reg    out_alpha_real_ap_vld;
wire   [15:0] out_alpha_imag;
reg    out_alpha_imag_ap_vld;
wire   [15:0] out_beta_real;
reg    out_beta_real_ap_vld;
wire   [15:0] out_beta_imag;
reg    out_beta_imag_ap_vld;
reg  signed [15:0] in_beta_imag_read_reg_424;
wire    ap_block_pp0_stage0_11001;
reg  signed [15:0] in_beta_imag_read_reg_424_pp0_iter1_reg;
reg  signed [15:0] in_beta_imag_read_reg_424_pp0_iter2_reg;
reg  signed [15:0] in_beta_imag_read_reg_424_pp0_iter3_reg;
reg  signed [15:0] in_beta_imag_read_reg_424_pp0_iter4_reg;
reg  signed [15:0] in_beta_imag_read_reg_424_pp0_iter5_reg;
reg  signed [15:0] in_beta_real_read_reg_430;
reg  signed [15:0] in_beta_real_read_reg_430_pp0_iter1_reg;
reg  signed [15:0] in_beta_real_read_reg_430_pp0_iter2_reg;
reg  signed [15:0] in_beta_real_read_reg_430_pp0_iter3_reg;
reg  signed [15:0] in_beta_real_read_reg_430_pp0_iter4_reg;
reg  signed [15:0] in_beta_real_read_reg_430_pp0_iter5_reg;
reg  signed [15:0] in_alpha_imag_read_reg_436;
reg  signed [15:0] in_alpha_imag_read_reg_436_pp0_iter1_reg;
reg  signed [15:0] in_alpha_imag_read_reg_436_pp0_iter2_reg;
reg  signed [15:0] in_alpha_imag_read_reg_436_pp0_iter3_reg;
reg  signed [15:0] in_alpha_imag_read_reg_436_pp0_iter4_reg;
reg  signed [15:0] in_alpha_imag_read_reg_436_pp0_iter5_reg;
reg  signed [15:0] in_alpha_real_read_reg_442;
reg  signed [15:0] in_alpha_real_read_reg_442_pp0_iter1_reg;
reg  signed [15:0] in_alpha_real_read_reg_442_pp0_iter2_reg;
reg  signed [15:0] in_alpha_real_read_reg_442_pp0_iter3_reg;
reg  signed [15:0] in_alpha_real_read_reg_442_pp0_iter4_reg;
reg  signed [15:0] in_alpha_real_read_reg_442_pp0_iter5_reg;
reg   [1:0] operation_read_reg_448;
wire   [16:0] ret_V_fu_251_p2;
reg  signed [16:0] ret_V_reg_455;
wire   [16:0] ret_V_1_fu_263_p2;
reg  signed [16:0] ret_V_1_reg_460;
wire   [16:0] ret_V_2_fu_269_p2;
reg  signed [16:0] ret_V_2_reg_465;
wire   [16:0] ret_V_3_fu_275_p2;
reg  signed [16:0] ret_V_3_reg_470;
wire   [0:0] icmp_ln49_fu_281_p2;
reg   [0:0] icmp_ln49_reg_475;
reg   [0:0] icmp_ln49_reg_475_pp0_iter2_reg;
reg   [0:0] icmp_ln49_reg_475_pp0_iter3_reg;
reg   [0:0] icmp_ln49_reg_475_pp0_iter4_reg;
reg   [0:0] icmp_ln49_reg_475_pp0_iter5_reg;
wire   [0:0] icmp_ln49_2_fu_291_p2;
reg   [0:0] icmp_ln49_2_reg_483;
reg   [0:0] icmp_ln49_2_reg_483_pp0_iter2_reg;
reg   [0:0] icmp_ln49_2_reg_483_pp0_iter3_reg;
reg   [0:0] icmp_ln49_2_reg_483_pp0_iter4_reg;
reg   [0:0] icmp_ln49_2_reg_483_pp0_iter5_reg;
wire   [0:0] or_ln49_fu_296_p2;
reg   [0:0] or_ln49_reg_489;
reg   [0:0] or_ln49_reg_489_pp0_iter2_reg;
reg   [0:0] or_ln49_reg_489_pp0_iter3_reg;
reg   [0:0] or_ln49_reg_489_pp0_iter4_reg;
reg   [0:0] or_ln49_reg_489_pp0_iter5_reg;
wire   [28:0] grp_fu_149_p2;
reg   [28:0] mul_ln1270_reg_517;
wire   [28:0] grp_fu_151_p2;
reg   [28:0] mul_ln1270_1_reg_522;
wire   [28:0] grp_fu_148_p2;
reg   [28:0] mul_ln1270_2_reg_527;
wire   [28:0] grp_fu_150_p2;
reg   [28:0] mul_ln1270_3_reg_532;
wire    ap_block_pp0_stage0_01001;
wire   [13:0] grp_fu_148_p1;
wire    ap_block_pp0_stage0;
wire   [13:0] grp_fu_149_p1;
wire   [13:0] grp_fu_150_p1;
wire   [13:0] grp_fu_151_p1;
wire  signed [16:0] sext_ln1347_1_fu_248_p1;
wire  signed [16:0] sext_ln1347_fu_245_p1;
wire  signed [16:0] sext_ln1347_3_fu_260_p1;
wire  signed [16:0] sext_ln1347_2_fu_257_p1;
wire   [0:0] icmp_ln49_1_fu_286_p2;
wire   [15:0] trunc_ln818_3_fu_345_p4;
wire   [15:0] select_ln49_fu_354_p3;
wire   [15:0] trunc_ln818_2_fu_336_p4;
wire   [15:0] select_ln49_2_fu_368_p3;
wire   [15:0] select_ln49_3_fu_375_p3;
wire   [15:0] trunc_ln818_1_fu_327_p4;
wire   [15:0] select_ln49_5_fu_389_p3;
wire   [15:0] trunc_ln_fu_318_p4;
wire   [15:0] select_ln49_7_fu_403_p3;
wire   [15:0] select_ln49_8_fu_410_p3;
reg   [0:0] ap_NS_fsm;
reg    ap_idle_pp0_0to5;
reg    ap_reset_idle_pp0;
wire    ap_enable_pp0;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
end

qubit_processor_fixed_control_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CONTROL_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CONTROL_DATA_WIDTH ))
control_s_axi_U(
    .AWVALID(s_axi_control_AWVALID),
    .AWREADY(s_axi_control_AWREADY),
    .AWADDR(s_axi_control_AWADDR),
    .WVALID(s_axi_control_WVALID),
    .WREADY(s_axi_control_WREADY),
    .WDATA(s_axi_control_WDATA),
    .WSTRB(s_axi_control_WSTRB),
    .ARVALID(s_axi_control_ARVALID),
    .ARREADY(s_axi_control_ARREADY),
    .ARADDR(s_axi_control_ARADDR),
    .RVALID(s_axi_control_RVALID),
    .RREADY(s_axi_control_RREADY),
    .RDATA(s_axi_control_RDATA),
    .RRESP(s_axi_control_RRESP),
    .BVALID(s_axi_control_BVALID),
    .BREADY(s_axi_control_BREADY),
    .BRESP(s_axi_control_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .operation(operation),
    .in_alpha_real(in_alpha_real),
    .in_alpha_imag(in_alpha_imag),
    .in_beta_real(in_beta_real),
    .in_beta_imag(in_beta_imag),
    .out_alpha_real(out_alpha_real),
    .out_alpha_real_ap_vld(out_alpha_real_ap_vld),
    .out_alpha_imag(out_alpha_imag),
    .out_alpha_imag_ap_vld(out_alpha_imag_ap_vld),
    .out_beta_real(out_beta_real),
    .out_beta_real_ap_vld(out_beta_real_ap_vld),
    .out_beta_imag(out_beta_imag),
    .out_beta_imag_ap_vld(out_beta_imag_ap_vld),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle)
);

qubit_processor_fixed_mul_17s_14ns_29_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 17 ),
    .din1_WIDTH( 14 ),
    .dout_WIDTH( 29 ))
mul_17s_14ns_29_4_1_U1(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(ret_V_2_reg_465),
    .din1(grp_fu_148_p1),
    .ce(1'b1),
    .dout(grp_fu_148_p2)
);

qubit_processor_fixed_mul_17s_14ns_29_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 17 ),
    .din1_WIDTH( 14 ),
    .dout_WIDTH( 29 ))
mul_17s_14ns_29_4_1_U2(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(ret_V_reg_455),
    .din1(grp_fu_149_p1),
    .ce(1'b1),
    .dout(grp_fu_149_p2)
);

qubit_processor_fixed_mul_17s_14ns_29_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 17 ),
    .din1_WIDTH( 14 ),
    .dout_WIDTH( 29 ))
mul_17s_14ns_29_4_1_U3(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(ret_V_3_reg_470),
    .din1(grp_fu_150_p1),
    .ce(1'b1),
    .dout(grp_fu_150_p2)
);

qubit_processor_fixed_mul_17s_14ns_29_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 17 ),
    .din1_WIDTH( 14 ),
    .dout_WIDTH( 29 ))
mul_17s_14ns_29_4_1_U4(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(ret_V_1_reg_460),
    .din1(grp_fu_151_p1),
    .ce(1'b1),
    .dout(grp_fu_151_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln49_2_reg_483 <= icmp_ln49_2_fu_291_p2;
        icmp_ln49_reg_475 <= icmp_ln49_fu_281_p2;
        in_alpha_imag_read_reg_436 <= in_alpha_imag;
        in_alpha_imag_read_reg_436_pp0_iter1_reg <= in_alpha_imag_read_reg_436;
        in_alpha_real_read_reg_442 <= in_alpha_real;
        in_alpha_real_read_reg_442_pp0_iter1_reg <= in_alpha_real_read_reg_442;
        in_beta_imag_read_reg_424 <= in_beta_imag;
        in_beta_imag_read_reg_424_pp0_iter1_reg <= in_beta_imag_read_reg_424;
        in_beta_real_read_reg_430 <= in_beta_real;
        in_beta_real_read_reg_430_pp0_iter1_reg <= in_beta_real_read_reg_430;
        operation_read_reg_448 <= operation;
        or_ln49_reg_489 <= or_ln49_fu_296_p2;
        ret_V_1_reg_460 <= ret_V_1_fu_263_p2;
        ret_V_2_reg_465 <= ret_V_2_fu_269_p2;
        ret_V_3_reg_470 <= ret_V_3_fu_275_p2;
        ret_V_reg_455 <= ret_V_fu_251_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        icmp_ln49_2_reg_483_pp0_iter2_reg <= icmp_ln49_2_reg_483;
        icmp_ln49_2_reg_483_pp0_iter3_reg <= icmp_ln49_2_reg_483_pp0_iter2_reg;
        icmp_ln49_2_reg_483_pp0_iter4_reg <= icmp_ln49_2_reg_483_pp0_iter3_reg;
        icmp_ln49_2_reg_483_pp0_iter5_reg <= icmp_ln49_2_reg_483_pp0_iter4_reg;
        icmp_ln49_reg_475_pp0_iter2_reg <= icmp_ln49_reg_475;
        icmp_ln49_reg_475_pp0_iter3_reg <= icmp_ln49_reg_475_pp0_iter2_reg;
        icmp_ln49_reg_475_pp0_iter4_reg <= icmp_ln49_reg_475_pp0_iter3_reg;
        icmp_ln49_reg_475_pp0_iter5_reg <= icmp_ln49_reg_475_pp0_iter4_reg;
        in_alpha_imag_read_reg_436_pp0_iter2_reg <= in_alpha_imag_read_reg_436_pp0_iter1_reg;
        in_alpha_imag_read_reg_436_pp0_iter3_reg <= in_alpha_imag_read_reg_436_pp0_iter2_reg;
        in_alpha_imag_read_reg_436_pp0_iter4_reg <= in_alpha_imag_read_reg_436_pp0_iter3_reg;
        in_alpha_imag_read_reg_436_pp0_iter5_reg <= in_alpha_imag_read_reg_436_pp0_iter4_reg;
        in_alpha_real_read_reg_442_pp0_iter2_reg <= in_alpha_real_read_reg_442_pp0_iter1_reg;
        in_alpha_real_read_reg_442_pp0_iter3_reg <= in_alpha_real_read_reg_442_pp0_iter2_reg;
        in_alpha_real_read_reg_442_pp0_iter4_reg <= in_alpha_real_read_reg_442_pp0_iter3_reg;
        in_alpha_real_read_reg_442_pp0_iter5_reg <= in_alpha_real_read_reg_442_pp0_iter4_reg;
        in_beta_imag_read_reg_424_pp0_iter2_reg <= in_beta_imag_read_reg_424_pp0_iter1_reg;
        in_beta_imag_read_reg_424_pp0_iter3_reg <= in_beta_imag_read_reg_424_pp0_iter2_reg;
        in_beta_imag_read_reg_424_pp0_iter4_reg <= in_beta_imag_read_reg_424_pp0_iter3_reg;
        in_beta_imag_read_reg_424_pp0_iter5_reg <= in_beta_imag_read_reg_424_pp0_iter4_reg;
        in_beta_real_read_reg_430_pp0_iter2_reg <= in_beta_real_read_reg_430_pp0_iter1_reg;
        in_beta_real_read_reg_430_pp0_iter3_reg <= in_beta_real_read_reg_430_pp0_iter2_reg;
        in_beta_real_read_reg_430_pp0_iter4_reg <= in_beta_real_read_reg_430_pp0_iter3_reg;
        in_beta_real_read_reg_430_pp0_iter5_reg <= in_beta_real_read_reg_430_pp0_iter4_reg;
        or_ln49_reg_489_pp0_iter2_reg <= or_ln49_reg_489;
        or_ln49_reg_489_pp0_iter3_reg <= or_ln49_reg_489_pp0_iter2_reg;
        or_ln49_reg_489_pp0_iter4_reg <= or_ln49_reg_489_pp0_iter3_reg;
        or_ln49_reg_489_pp0_iter5_reg <= or_ln49_reg_489_pp0_iter4_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (or_ln49_reg_489_pp0_iter4_reg == 1'd0) & (icmp_ln49_reg_475_pp0_iter4_reg == 1'd1))) begin
        mul_ln1270_1_reg_522 <= grp_fu_151_p2;
        mul_ln1270_2_reg_527 <= grp_fu_148_p2;
        mul_ln1270_3_reg_532 <= grp_fu_150_p2;
        mul_ln1270_reg_517 <= grp_fu_149_p2;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter6 == 1'b1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0_0to5 = 1'b1;
    end else begin
        ap_idle_pp0_0to5 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0_0to5 == 1'b1))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter6 == 1'b1))) begin
        out_alpha_imag_ap_vld = 1'b1;
    end else begin
        out_alpha_imag_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter6 == 1'b1))) begin
        out_alpha_real_ap_vld = 1'b1;
    end else begin
        out_alpha_real_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter6 == 1'b1))) begin
        out_beta_imag_ap_vld = 1'b1;
    end else begin
        out_beta_imag_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter6 == 1'b1))) begin
        out_beta_real_ap_vld = 1'b1;
    end else begin
        out_beta_real_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_01001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start;

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign grp_fu_148_p1 = 29'd5792;

assign grp_fu_149_p1 = 29'd5792;

assign grp_fu_150_p1 = 29'd5792;

assign grp_fu_151_p1 = 29'd5792;

assign icmp_ln49_1_fu_286_p2 = ((operation_read_reg_448 == 2'd0) ? 1'b1 : 1'b0);

assign icmp_ln49_2_fu_291_p2 = ((operation_read_reg_448 == 2'd1) ? 1'b1 : 1'b0);

assign icmp_ln49_fu_281_p2 = ((operation_read_reg_448 == 2'd2) ? 1'b1 : 1'b0);

assign or_ln49_fu_296_p2 = (icmp_ln49_2_fu_291_p2 | icmp_ln49_1_fu_286_p2);

assign out_alpha_imag = ((or_ln49_reg_489_pp0_iter5_reg[0:0] == 1'b1) ? 16'd0 : select_ln49_5_fu_389_p3);

assign out_alpha_real = ((or_ln49_reg_489_pp0_iter5_reg[0:0] == 1'b1) ? select_ln49_7_fu_403_p3 : select_ln49_8_fu_410_p3);

assign out_beta_imag = ((or_ln49_reg_489_pp0_iter5_reg[0:0] == 1'b1) ? 16'd0 : select_ln49_fu_354_p3);

assign out_beta_real = ((or_ln49_reg_489_pp0_iter5_reg[0:0] == 1'b1) ? select_ln49_2_fu_368_p3 : select_ln49_3_fu_375_p3);

assign ret_V_1_fu_263_p2 = ($signed(sext_ln1347_3_fu_260_p1) + $signed(sext_ln1347_2_fu_257_p1));

assign ret_V_2_fu_269_p2 = ($signed(sext_ln1347_fu_245_p1) - $signed(sext_ln1347_1_fu_248_p1));

assign ret_V_3_fu_275_p2 = ($signed(sext_ln1347_2_fu_257_p1) - $signed(sext_ln1347_3_fu_260_p1));

assign ret_V_fu_251_p2 = ($signed(sext_ln1347_1_fu_248_p1) + $signed(sext_ln1347_fu_245_p1));

assign select_ln49_2_fu_368_p3 = ((icmp_ln49_2_reg_483_pp0_iter5_reg[0:0] == 1'b1) ? 16'd8192 : 16'd0);

assign select_ln49_3_fu_375_p3 = ((icmp_ln49_reg_475_pp0_iter5_reg[0:0] == 1'b1) ? trunc_ln818_2_fu_336_p4 : in_alpha_real_read_reg_442_pp0_iter5_reg);

assign select_ln49_5_fu_389_p3 = ((icmp_ln49_reg_475_pp0_iter5_reg[0:0] == 1'b1) ? trunc_ln818_1_fu_327_p4 : in_beta_imag_read_reg_424_pp0_iter5_reg);

assign select_ln49_7_fu_403_p3 = ((icmp_ln49_2_reg_483_pp0_iter5_reg[0:0] == 1'b1) ? 16'd0 : 16'd8192);

assign select_ln49_8_fu_410_p3 = ((icmp_ln49_reg_475_pp0_iter5_reg[0:0] == 1'b1) ? trunc_ln_fu_318_p4 : in_beta_real_read_reg_430_pp0_iter5_reg);

assign select_ln49_fu_354_p3 = ((icmp_ln49_reg_475_pp0_iter5_reg[0:0] == 1'b1) ? trunc_ln818_3_fu_345_p4 : in_alpha_imag_read_reg_436_pp0_iter5_reg);

assign sext_ln1347_1_fu_248_p1 = in_beta_real_read_reg_430;

assign sext_ln1347_2_fu_257_p1 = in_alpha_imag_read_reg_436;

assign sext_ln1347_3_fu_260_p1 = in_beta_imag_read_reg_424;

assign sext_ln1347_fu_245_p1 = in_alpha_real_read_reg_442;

assign trunc_ln818_1_fu_327_p4 = {{mul_ln1270_1_reg_522[28:13]}};

assign trunc_ln818_2_fu_336_p4 = {{mul_ln1270_2_reg_527[28:13]}};

assign trunc_ln818_3_fu_345_p4 = {{mul_ln1270_3_reg_532[28:13]}};

assign trunc_ln_fu_318_p4 = {{mul_ln1270_reg_517[28:13]}};

endmodule //qubit_processor_fixed
