// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="qubit_processor_fixed_dma_qubit_processor_fixed_dma,hls_ip_2022_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=5.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=3.300000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=311,HLS_SYN_LUT=221,HLS_VERSION=2022_2}" *)

module qubit_processor_fixed_dma (
        ap_clk,
        ap_rst_n,
        in_stream_TDATA,
        in_stream_TVALID,
        in_stream_TREADY,
        in_stream_TKEEP,
        in_stream_TSTRB,
        in_stream_TLAST,
        out_stream_TDATA,
        out_stream_TVALID,
        out_stream_TREADY,
        out_stream_TKEEP,
        out_stream_TSTRB,
        out_stream_TLAST,
        s_axi_control_AWVALID,
        s_axi_control_AWREADY,
        s_axi_control_AWADDR,
        s_axi_control_WVALID,
        s_axi_control_WREADY,
        s_axi_control_WDATA,
        s_axi_control_WSTRB,
        s_axi_control_ARVALID,
        s_axi_control_ARREADY,
        s_axi_control_ARADDR,
        s_axi_control_RVALID,
        s_axi_control_RREADY,
        s_axi_control_RDATA,
        s_axi_control_RRESP,
        s_axi_control_BVALID,
        s_axi_control_BREADY,
        s_axi_control_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state7 = 3'd4;
parameter    C_S_AXI_CONTROL_DATA_WIDTH = 32;
parameter    C_S_AXI_CONTROL_ADDR_WIDTH = 5;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_CONTROL_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
input  [63:0] in_stream_TDATA;
input   in_stream_TVALID;
output   in_stream_TREADY;
input  [7:0] in_stream_TKEEP;
input  [7:0] in_stream_TSTRB;
input  [0:0] in_stream_TLAST;
output  [63:0] out_stream_TDATA;
output   out_stream_TVALID;
input   out_stream_TREADY;
output  [7:0] out_stream_TKEEP;
output  [7:0] out_stream_TSTRB;
output  [0:0] out_stream_TLAST;
input   s_axi_control_AWVALID;
output   s_axi_control_AWREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_AWADDR;
input   s_axi_control_WVALID;
output   s_axi_control_WREADY;
input  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_WDATA;
input  [C_S_AXI_CONTROL_WSTRB_WIDTH - 1:0] s_axi_control_WSTRB;
input   s_axi_control_ARVALID;
output   s_axi_control_ARREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_ARADDR;
output   s_axi_control_RVALID;
input   s_axi_control_RREADY;
output  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_RDATA;
output  [1:0] s_axi_control_RRESP;
output   s_axi_control_BVALID;
input   s_axi_control_BREADY;
output  [1:0] s_axi_control_BRESP;
output   interrupt;

 reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
wire   [1:0] operation;
reg    in_stream_TDATA_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_pp0_stage0;
reg    out_stream_TDATA_blk_n;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg   [1:0] operation_read_reg_323;
wire   [0:0] tmp_last_V_fu_180_p1;
reg   [0:0] tmp_last_V_reg_327;
reg    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_state4_pp0_stage0_iter2;
reg    ap_block_state5_pp0_stage0_iter3;
reg    ap_block_state6_pp0_stage0_iter4;
reg    ap_block_pp0_stage0_11001;
reg   [0:0] tmp_last_V_reg_327_pp0_iter1_reg;
reg   [0:0] tmp_last_V_reg_327_pp0_iter2_reg;
wire  signed [15:0] temp_in_alpha_r_V_fu_184_p1;
wire  signed [15:0] temp_in_alpha_i_V_fu_188_p4;
wire  signed [15:0] temp_in_beta_r_V_fu_198_p4;
wire  signed [15:0] temp_in_beta_i_V_fu_208_p4;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_flush_enable;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg   [15:0] ap_phi_mux_temp_out_alpha_r_V_phi_fu_135_p6;
wire   [15:0] ap_phi_reg_pp0_iter0_temp_out_alpha_r_V_reg_132;
reg   [15:0] ap_phi_reg_pp0_iter1_temp_out_alpha_r_V_reg_132;
reg   [15:0] ap_phi_reg_pp0_iter2_temp_out_alpha_r_V_reg_132;
reg   [15:0] ap_phi_reg_pp0_iter3_temp_out_alpha_r_V_reg_132;
reg   [15:0] ap_phi_mux_temp_out_alpha_i_V_phi_fu_146_p6;
wire   [15:0] ap_phi_reg_pp0_iter0_temp_out_alpha_i_V_reg_143;
reg   [15:0] ap_phi_reg_pp0_iter1_temp_out_alpha_i_V_reg_143;
reg   [15:0] ap_phi_reg_pp0_iter2_temp_out_alpha_i_V_reg_143;
reg   [15:0] ap_phi_reg_pp0_iter3_temp_out_alpha_i_V_reg_143;
reg   [15:0] ap_phi_mux_temp_out_beta_r_V_phi_fu_157_p6;
wire   [15:0] ap_phi_reg_pp0_iter0_temp_out_beta_r_V_reg_154;
reg   [15:0] ap_phi_reg_pp0_iter1_temp_out_beta_r_V_reg_154;
reg   [15:0] ap_phi_reg_pp0_iter2_temp_out_beta_r_V_reg_154;
reg   [15:0] ap_phi_reg_pp0_iter3_temp_out_beta_r_V_reg_154;
reg   [15:0] ap_phi_mux_temp_out_beta_i_V_phi_fu_168_p6;
wire   [15:0] ap_phi_reg_pp0_iter0_temp_out_beta_i_V_reg_165;
reg   [15:0] ap_phi_reg_pp0_iter1_temp_out_beta_i_V_reg_165;
reg   [15:0] ap_phi_reg_pp0_iter2_temp_out_beta_i_V_reg_165;
reg   [15:0] ap_phi_reg_pp0_iter3_temp_out_beta_i_V_reg_165;
reg    ap_block_pp0_stage0_01001;
wire  signed [28:0] grp_fu_287_p3;
wire  signed [28:0] grp_fu_296_p3;
wire  signed [28:0] grp_fu_305_p3;
wire  signed [28:0] grp_fu_314_p3;
wire  signed [15:0] grp_fu_287_p0;
wire  signed [16:0] sext_ln1347_1_fu_222_p1;
wire  signed [15:0] grp_fu_287_p1;
wire  signed [16:0] sext_ln1347_fu_218_p1;
wire   [12:0] grp_fu_287_p2;
wire  signed [15:0] grp_fu_296_p0;
wire  signed [16:0] sext_ln1347_3_fu_230_p1;
wire  signed [15:0] grp_fu_296_p1;
wire  signed [16:0] sext_ln1347_2_fu_226_p1;
wire   [12:0] grp_fu_296_p2;
wire  signed [15:0] grp_fu_305_p0;
wire  signed [15:0] grp_fu_305_p1;
wire   [12:0] grp_fu_305_p2;
wire  signed [15:0] grp_fu_314_p0;
wire  signed [15:0] grp_fu_314_p1;
wire   [12:0] grp_fu_314_p2;
reg    grp_fu_287_ce;
reg    grp_fu_296_ce;
reg    grp_fu_305_ce;
reg    grp_fu_314_ce;
wire    ap_CS_fsm_state7;
wire    regslice_both_out_stream_V_data_V_U_apdone_blk;
reg   [2:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
reg    ap_ST_fsm_state7_blk;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire    regslice_both_in_stream_V_data_V_U_apdone_blk;
wire   [63:0] in_stream_TDATA_int_regslice;
wire    in_stream_TVALID_int_regslice;
reg    in_stream_TREADY_int_regslice;
wire    regslice_both_in_stream_V_data_V_U_ack_in;
wire    regslice_both_in_stream_V_keep_V_U_apdone_blk;
wire   [7:0] in_stream_TKEEP_int_regslice;
wire    regslice_both_in_stream_V_keep_V_U_vld_out;
wire    regslice_both_in_stream_V_keep_V_U_ack_in;
wire    regslice_both_in_stream_V_strb_V_U_apdone_blk;
wire   [7:0] in_stream_TSTRB_int_regslice;
wire    regslice_both_in_stream_V_strb_V_U_vld_out;
wire    regslice_both_in_stream_V_strb_V_U_ack_in;
wire    regslice_both_in_stream_V_last_V_U_apdone_blk;
wire   [0:0] in_stream_TLAST_int_regslice;
wire    regslice_both_in_stream_V_last_V_U_vld_out;
wire    regslice_both_in_stream_V_last_V_U_ack_in;
wire   [63:0] out_stream_TDATA_int_regslice;
reg    out_stream_TVALID_int_regslice;
wire    out_stream_TREADY_int_regslice;
wire    regslice_both_out_stream_V_data_V_U_vld_out;
wire    regslice_both_out_stream_V_keep_V_U_apdone_blk;
wire    regslice_both_out_stream_V_keep_V_U_ack_in_dummy;
wire    regslice_both_out_stream_V_keep_V_U_vld_out;
wire    regslice_both_out_stream_V_strb_V_U_apdone_blk;
wire    regslice_both_out_stream_V_strb_V_U_ack_in_dummy;
wire    regslice_both_out_stream_V_strb_V_U_vld_out;
wire    regslice_both_out_stream_V_last_V_U_apdone_blk;
wire    regslice_both_out_stream_V_last_V_U_ack_in_dummy;
wire    regslice_both_out_stream_V_last_V_U_vld_out;
reg    ap_condition_162;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
end

qubit_processor_fixed_dma_control_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CONTROL_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CONTROL_DATA_WIDTH ))
control_s_axi_U(
    .AWVALID(s_axi_control_AWVALID),
    .AWREADY(s_axi_control_AWREADY),
    .AWADDR(s_axi_control_AWADDR),
    .WVALID(s_axi_control_WVALID),
    .WREADY(s_axi_control_WREADY),
    .WDATA(s_axi_control_WDATA),
    .WSTRB(s_axi_control_WSTRB),
    .ARVALID(s_axi_control_ARVALID),
    .ARREADY(s_axi_control_ARREADY),
    .ARADDR(s_axi_control_ARADDR),
    .RVALID(s_axi_control_RVALID),
    .RREADY(s_axi_control_RREADY),
    .RDATA(s_axi_control_RDATA),
    .RRESP(s_axi_control_RRESP),
    .BVALID(s_axi_control_BVALID),
    .BREADY(s_axi_control_BREADY),
    .BRESP(s_axi_control_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .operation(operation),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle)
);

qubit_processor_fixed_dma_am_addmul_16s_16s_13ns_29_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 13 ),
    .dout_WIDTH( 29 ))
am_addmul_16s_16s_13ns_29_4_1_U1(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_287_p0),
    .din1(grp_fu_287_p1),
    .din2(grp_fu_287_p2),
    .ce(grp_fu_287_ce),
    .dout(grp_fu_287_p3)
);

qubit_processor_fixed_dma_am_addmul_16s_16s_13ns_29_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 13 ),
    .dout_WIDTH( 29 ))
am_addmul_16s_16s_13ns_29_4_1_U2(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_296_p0),
    .din1(grp_fu_296_p1),
    .din2(grp_fu_296_p2),
    .ce(grp_fu_296_ce),
    .dout(grp_fu_296_p3)
);

qubit_processor_fixed_dma_am_submul_16s_16s_13ns_29_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 13 ),
    .dout_WIDTH( 29 ))
am_submul_16s_16s_13ns_29_4_1_U3(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_305_p0),
    .din1(grp_fu_305_p1),
    .din2(grp_fu_305_p2),
    .ce(grp_fu_305_ce),
    .dout(grp_fu_305_p3)
);

qubit_processor_fixed_dma_am_submul_16s_16s_13ns_29_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 13 ),
    .dout_WIDTH( 29 ))
am_submul_16s_16s_13ns_29_4_1_U4(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_314_p0),
    .din1(grp_fu_314_p1),
    .din2(grp_fu_314_p2),
    .ce(grp_fu_314_ce),
    .dout(grp_fu_314_p3)
);

qubit_processor_fixed_dma_regslice_both #(
    .DataWidth( 64 ))
regslice_both_in_stream_V_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(in_stream_TDATA),
    .vld_in(in_stream_TVALID),
    .ack_in(regslice_both_in_stream_V_data_V_U_ack_in),
    .data_out(in_stream_TDATA_int_regslice),
    .vld_out(in_stream_TVALID_int_regslice),
    .ack_out(in_stream_TREADY_int_regslice),
    .apdone_blk(regslice_both_in_stream_V_data_V_U_apdone_blk)
);

qubit_processor_fixed_dma_regslice_both #(
    .DataWidth( 8 ))
regslice_both_in_stream_V_keep_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(in_stream_TKEEP),
    .vld_in(in_stream_TVALID),
    .ack_in(regslice_both_in_stream_V_keep_V_U_ack_in),
    .data_out(in_stream_TKEEP_int_regslice),
    .vld_out(regslice_both_in_stream_V_keep_V_U_vld_out),
    .ack_out(in_stream_TREADY_int_regslice),
    .apdone_blk(regslice_both_in_stream_V_keep_V_U_apdone_blk)
);

qubit_processor_fixed_dma_regslice_both #(
    .DataWidth( 8 ))
regslice_both_in_stream_V_strb_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(in_stream_TSTRB),
    .vld_in(in_stream_TVALID),
    .ack_in(regslice_both_in_stream_V_strb_V_U_ack_in),
    .data_out(in_stream_TSTRB_int_regslice),
    .vld_out(regslice_both_in_stream_V_strb_V_U_vld_out),
    .ack_out(in_stream_TREADY_int_regslice),
    .apdone_blk(regslice_both_in_stream_V_strb_V_U_apdone_blk)
);

qubit_processor_fixed_dma_regslice_both #(
    .DataWidth( 1 ))
regslice_both_in_stream_V_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(in_stream_TLAST),
    .vld_in(in_stream_TVALID),
    .ack_in(regslice_both_in_stream_V_last_V_U_ack_in),
    .data_out(in_stream_TLAST_int_regslice),
    .vld_out(regslice_both_in_stream_V_last_V_U_vld_out),
    .ack_out(in_stream_TREADY_int_regslice),
    .apdone_blk(regslice_both_in_stream_V_last_V_U_apdone_blk)
);

qubit_processor_fixed_dma_regslice_both #(
    .DataWidth( 64 ))
regslice_both_out_stream_V_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(out_stream_TDATA_int_regslice),
    .vld_in(out_stream_TVALID_int_regslice),
    .ack_in(out_stream_TREADY_int_regslice),
    .data_out(out_stream_TDATA),
    .vld_out(regslice_both_out_stream_V_data_V_U_vld_out),
    .ack_out(out_stream_TREADY),
    .apdone_blk(regslice_both_out_stream_V_data_V_U_apdone_blk)
);

qubit_processor_fixed_dma_regslice_both #(
    .DataWidth( 8 ))
regslice_both_out_stream_V_keep_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(8'd255),
    .vld_in(out_stream_TVALID_int_regslice),
    .ack_in(regslice_both_out_stream_V_keep_V_U_ack_in_dummy),
    .data_out(out_stream_TKEEP),
    .vld_out(regslice_both_out_stream_V_keep_V_U_vld_out),
    .ack_out(out_stream_TREADY),
    .apdone_blk(regslice_both_out_stream_V_keep_V_U_apdone_blk)
);

qubit_processor_fixed_dma_regslice_both #(
    .DataWidth( 8 ))
regslice_both_out_stream_V_strb_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(8'd255),
    .vld_in(out_stream_TVALID_int_regslice),
    .ack_in(regslice_both_out_stream_V_strb_V_U_ack_in_dummy),
    .data_out(out_stream_TSTRB),
    .vld_out(regslice_both_out_stream_V_strb_V_U_vld_out),
    .ack_out(out_stream_TREADY),
    .apdone_blk(regslice_both_out_stream_V_strb_V_U_apdone_blk)
);

qubit_processor_fixed_dma_regslice_both #(
    .DataWidth( 1 ))
regslice_both_out_stream_V_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(tmp_last_V_reg_327_pp0_iter2_reg),
    .vld_in(out_stream_TVALID_int_regslice),
    .ack_in(regslice_both_out_stream_V_last_V_U_ack_in_dummy),
    .data_out(out_stream_TLAST),
    .vld_out(regslice_both_out_stream_V_last_V_U_vld_out),
    .ack_out(out_stream_TREADY),
    .apdone_blk(regslice_both_out_stream_V_last_V_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_pp0_flush_enable)) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter4 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_162)) begin
        if ((operation_read_reg_323 == 2'd1)) begin
            ap_phi_reg_pp0_iter1_temp_out_alpha_i_V_reg_143 <= {{in_stream_TDATA_int_regslice[63:48]}};
        end else if ((~(operation_read_reg_323 == 2'd1) & ~(operation_read_reg_323 == 2'd0))) begin
            ap_phi_reg_pp0_iter1_temp_out_alpha_i_V_reg_143 <= {{in_stream_TDATA_int_regslice[31:16]}};
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter1_temp_out_alpha_i_V_reg_143 <= ap_phi_reg_pp0_iter0_temp_out_alpha_i_V_reg_143;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_162)) begin
        if ((operation_read_reg_323 == 2'd1)) begin
            ap_phi_reg_pp0_iter1_temp_out_alpha_r_V_reg_132 <= {{in_stream_TDATA_int_regslice[47:32]}};
        end else if ((~(operation_read_reg_323 == 2'd1) & ~(operation_read_reg_323 == 2'd0))) begin
            ap_phi_reg_pp0_iter1_temp_out_alpha_r_V_reg_132 <= temp_in_alpha_r_V_fu_184_p1;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter1_temp_out_alpha_r_V_reg_132 <= ap_phi_reg_pp0_iter0_temp_out_alpha_r_V_reg_132;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_162)) begin
        if ((operation_read_reg_323 == 2'd1)) begin
            ap_phi_reg_pp0_iter1_temp_out_beta_i_V_reg_165 <= {{in_stream_TDATA_int_regslice[31:16]}};
        end else if ((~(operation_read_reg_323 == 2'd1) & ~(operation_read_reg_323 == 2'd0))) begin
            ap_phi_reg_pp0_iter1_temp_out_beta_i_V_reg_165 <= {{in_stream_TDATA_int_regslice[63:48]}};
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter1_temp_out_beta_i_V_reg_165 <= ap_phi_reg_pp0_iter0_temp_out_beta_i_V_reg_165;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_162)) begin
        if ((operation_read_reg_323 == 2'd1)) begin
            ap_phi_reg_pp0_iter1_temp_out_beta_r_V_reg_154 <= temp_in_alpha_r_V_fu_184_p1;
        end else if ((~(operation_read_reg_323 == 2'd1) & ~(operation_read_reg_323 == 2'd0))) begin
            ap_phi_reg_pp0_iter1_temp_out_beta_r_V_reg_154 <= {{in_stream_TDATA_int_regslice[47:32]}};
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter1_temp_out_beta_r_V_reg_154 <= ap_phi_reg_pp0_iter0_temp_out_beta_r_V_reg_154;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_phi_reg_pp0_iter2_temp_out_alpha_i_V_reg_143 <= ap_phi_reg_pp0_iter1_temp_out_alpha_i_V_reg_143;
        ap_phi_reg_pp0_iter2_temp_out_alpha_r_V_reg_132 <= ap_phi_reg_pp0_iter1_temp_out_alpha_r_V_reg_132;
        ap_phi_reg_pp0_iter2_temp_out_beta_i_V_reg_165 <= ap_phi_reg_pp0_iter1_temp_out_beta_i_V_reg_165;
        ap_phi_reg_pp0_iter2_temp_out_beta_r_V_reg_154 <= ap_phi_reg_pp0_iter1_temp_out_beta_r_V_reg_154;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        ap_phi_reg_pp0_iter3_temp_out_alpha_i_V_reg_143 <= ap_phi_reg_pp0_iter2_temp_out_alpha_i_V_reg_143;
        ap_phi_reg_pp0_iter3_temp_out_alpha_r_V_reg_132 <= ap_phi_reg_pp0_iter2_temp_out_alpha_r_V_reg_132;
        ap_phi_reg_pp0_iter3_temp_out_beta_i_V_reg_165 <= ap_phi_reg_pp0_iter2_temp_out_beta_i_V_reg_165;
        ap_phi_reg_pp0_iter3_temp_out_beta_r_V_reg_154 <= ap_phi_reg_pp0_iter2_temp_out_beta_r_V_reg_154;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        operation_read_reg_323 <= operation;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_last_V_reg_327 <= in_stream_TLAST_int_regslice;
        tmp_last_V_reg_327_pp0_iter1_reg <= tmp_last_V_reg_327;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        tmp_last_V_reg_327_pp0_iter2_reg <= tmp_last_V_reg_327_pp0_iter1_reg;
    end
end

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if ((regslice_both_out_stream_V_data_V_U_apdone_blk == 1'b1)) begin
        ap_ST_fsm_state7_blk = 1'b1;
    end else begin
        ap_ST_fsm_state7_blk = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_last_V_fu_180_p1 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_pp0_flush_enable = 1'b1;
    end else begin
        ap_condition_pp0_flush_enable = 1'b0;
    end
end

always @ (*) begin
    if (((regslice_both_out_stream_V_data_V_U_apdone_blk == 1'b0) & (1'b1 == ap_CS_fsm_state7))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((operation_read_reg_323 == 2'd0)) begin
        ap_phi_mux_temp_out_alpha_i_V_phi_fu_146_p6 = {{grp_fu_296_p3[28:13]}};
    end else begin
        ap_phi_mux_temp_out_alpha_i_V_phi_fu_146_p6 = ap_phi_reg_pp0_iter3_temp_out_alpha_i_V_reg_143;
    end
end

always @ (*) begin
    if ((operation_read_reg_323 == 2'd0)) begin
        ap_phi_mux_temp_out_alpha_r_V_phi_fu_135_p6 = {{grp_fu_287_p3[28:13]}};
    end else begin
        ap_phi_mux_temp_out_alpha_r_V_phi_fu_135_p6 = ap_phi_reg_pp0_iter3_temp_out_alpha_r_V_reg_132;
    end
end

always @ (*) begin
    if ((operation_read_reg_323 == 2'd0)) begin
        ap_phi_mux_temp_out_beta_i_V_phi_fu_168_p6 = {{grp_fu_314_p3[28:13]}};
    end else begin
        ap_phi_mux_temp_out_beta_i_V_phi_fu_168_p6 = ap_phi_reg_pp0_iter3_temp_out_beta_i_V_reg_165;
    end
end

always @ (*) begin
    if ((operation_read_reg_323 == 2'd0)) begin
        ap_phi_mux_temp_out_beta_r_V_phi_fu_157_p6 = {{grp_fu_305_p3[28:13]}};
    end else begin
        ap_phi_mux_temp_out_beta_r_V_phi_fu_157_p6 = ap_phi_reg_pp0_iter3_temp_out_beta_r_V_reg_154;
    end
end

always @ (*) begin
    if (((regslice_both_out_stream_V_data_V_U_apdone_blk == 1'b0) & (1'b1 == ap_CS_fsm_state7))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_287_ce = 1'b1;
    end else begin
        grp_fu_287_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_296_ce = 1'b1;
    end else begin
        grp_fu_296_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_305_ce = 1'b1;
    end else begin
        grp_fu_305_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_314_ce = 1'b1;
    end else begin
        grp_fu_314_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        in_stream_TDATA_blk_n = in_stream_TVALID_int_regslice;
    end else begin
        in_stream_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        in_stream_TREADY_int_regslice = 1'b1;
    end else begin
        in_stream_TREADY_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0)) | ((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0)))) begin
        out_stream_TDATA_blk_n = out_stream_TREADY_int_regslice;
    end else begin
        out_stream_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        out_stream_TVALID_int_regslice = 1'b1;
    end else begin
        out_stream_TVALID_int_regslice = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((ap_enable_reg_pp0_iter4 == 1'b1) & (ap_enable_reg_pp0_iter3 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((ap_enable_reg_pp0_iter4 == 1'b1) & (ap_enable_reg_pp0_iter3 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state7 : begin
            if (((regslice_both_out_stream_V_data_V_U_apdone_blk == 1'b0) & (1'b1 == ap_CS_fsm_state7))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((ap_enable_reg_pp0_iter4 == 1'b1) & (out_stream_TREADY_int_regslice == 1'b0)) | ((ap_enable_reg_pp0_iter3 == 1'b1) & (out_stream_TREADY_int_regslice == 1'b0)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (in_stream_TVALID_int_regslice == 1'b0)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((ap_enable_reg_pp0_iter4 == 1'b1) & (out_stream_TREADY_int_regslice == 1'b0)) | ((ap_enable_reg_pp0_iter3 == 1'b1) & (out_stream_TREADY_int_regslice == 1'b0)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (in_stream_TVALID_int_regslice == 1'b0)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((ap_enable_reg_pp0_iter4 == 1'b1) & (out_stream_TREADY_int_regslice == 1'b0)) | ((ap_enable_reg_pp0_iter3 == 1'b1) & (out_stream_TREADY_int_regslice == 1'b0)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (in_stream_TVALID_int_regslice == 1'b0)));
end

always @ (*) begin
    ap_block_state2_pp0_stage0_iter0 = (in_stream_TVALID_int_regslice == 1'b0);
end

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state5_pp0_stage0_iter3 = (out_stream_TREADY_int_regslice == 1'b0);
end

always @ (*) begin
    ap_block_state6_pp0_stage0_iter4 = (out_stream_TREADY_int_regslice == 1'b0);
end

always @ (*) begin
    ap_condition_162 = ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_phi_reg_pp0_iter0_temp_out_alpha_i_V_reg_143 = 'bx;

assign ap_phi_reg_pp0_iter0_temp_out_alpha_r_V_reg_132 = 'bx;

assign ap_phi_reg_pp0_iter0_temp_out_beta_i_V_reg_165 = 'bx;

assign ap_phi_reg_pp0_iter0_temp_out_beta_r_V_reg_154 = 'bx;

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign grp_fu_287_p0 = sext_ln1347_1_fu_222_p1;

assign grp_fu_287_p1 = sext_ln1347_fu_218_p1;

assign grp_fu_287_p2 = 29'd5792;

assign grp_fu_296_p0 = sext_ln1347_3_fu_230_p1;

assign grp_fu_296_p1 = sext_ln1347_2_fu_226_p1;

assign grp_fu_296_p2 = 29'd5792;

assign grp_fu_305_p0 = sext_ln1347_fu_218_p1;

assign grp_fu_305_p1 = sext_ln1347_1_fu_222_p1;

assign grp_fu_305_p2 = 29'd5792;

assign grp_fu_314_p0 = sext_ln1347_2_fu_226_p1;

assign grp_fu_314_p1 = sext_ln1347_3_fu_230_p1;

assign grp_fu_314_p2 = 29'd5792;

assign in_stream_TREADY = regslice_both_in_stream_V_data_V_U_ack_in;

assign out_stream_TDATA_int_regslice = {{{{ap_phi_mux_temp_out_beta_i_V_phi_fu_168_p6}, {ap_phi_mux_temp_out_beta_r_V_phi_fu_157_p6}}, {ap_phi_mux_temp_out_alpha_i_V_phi_fu_146_p6}}, {ap_phi_mux_temp_out_alpha_r_V_phi_fu_135_p6}};

assign out_stream_TVALID = regslice_both_out_stream_V_data_V_U_vld_out;

assign sext_ln1347_1_fu_222_p1 = temp_in_beta_r_V_fu_198_p4;

assign sext_ln1347_2_fu_226_p1 = temp_in_alpha_i_V_fu_188_p4;

assign sext_ln1347_3_fu_230_p1 = temp_in_beta_i_V_fu_208_p4;

assign sext_ln1347_fu_218_p1 = temp_in_alpha_r_V_fu_184_p1;

assign temp_in_alpha_i_V_fu_188_p4 = {{in_stream_TDATA_int_regslice[31:16]}};

assign temp_in_alpha_r_V_fu_184_p1 = in_stream_TDATA_int_regslice[15:0];

assign temp_in_beta_i_V_fu_208_p4 = {{in_stream_TDATA_int_regslice[63:48]}};

assign temp_in_beta_r_V_fu_198_p4 = {{in_stream_TDATA_int_regslice[47:32]}};

assign tmp_last_V_fu_180_p1 = in_stream_TLAST_int_regslice;

endmodule //qubit_processor_fixed_dma
